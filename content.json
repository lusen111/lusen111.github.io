[{"title":"Linux下更改MySQL的存储目录","date":"2023-06-01T09:06:00.000Z","path":"2023/06/01/10/","text":"重要步骤：一定要先停止Mysql1# service mysqld stop 1、创建目标文件夹12# mkdir -p /data/mysql# chown -R mysql.mysql /data/mysql/ 2、迁移命令1# mysql_install_db --user=mysql --basedir=/usr --datadir=/data/mysql 3、为避免麻烦，删掉原文件夹&#x2F;var&#x2F;lib&#x2F;mysql1# rm -rf /var/lib/mysql/* 4、修改&#x2F;etc&#x2F;my.cnf配置文件12[mysqld]datadir=/data/mysql 5、启动mysql12# chkconfig mysqld on# service mysqld restart","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Hexo博客集成Gitment评论","date":"2023-06-01T08:52:00.000Z","path":"2023/06/01/5/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 Gitment 是一位作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown &#x2F; GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。 1、注册 OAuth Application 注册一个新的 OAuth Application ➡️ OAuth Application Application name 应用名称(根据实际来填写) Homepage URL 主页网址(应用程序主页的完整URL) Application description 应用说明(应用描述) Authorization callback URL 授权回调URL(一般是博客的域名) 2、配置hexo-theme-yilia-plus主题注册完成后得到Client ID和Client Secret 修改hexo-theme-yilia-plus主题的配置文件_config.yml123456gitment_owner: JoeyBling #你的 GitHub IDgitment_remote: false # 是否使用官方js(false可以提升访问速度)gitment_repo: &#x27;yilia-plus-demo&#x27; #存储评论的 repogitment_oauth: client_id: &#x27;*********&#x27; #client ID client_secret: &#x27;*********&#x27; #client secret 3、重新编译运行即可查看效果1hexo s -g hexo-theme-yilia-plus配置Demo ➡️ https://joeybling.github.io/yilia-plus-demo","link":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客使用gulp压缩静态资源","date":"2023-06-01T08:35:00.000Z","path":"2023/06/01/7/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 1、全局安装gulp123npm install gulp -g# 查看版本gulp -v 2、安装gulp插件 在站点根目录下安装 12345678910111213npm install gulp --savenpm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save# 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript# 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题npm install babel-core@6.26.3 --savenpm install gulp-babel@7.0.1 --savenpm install babel-preset-es2015@6.24.1 --save# gulp-babel 取消严格模式方法(&quot;use strict&quot;)npm install babel-plugin-transform-remove-strict-mode --save 问题：如果安装gulp-imagemin错误请执行以下语句sudo npm i gulp-imagemin --unsafe-perms 3、创建gulpfile.js文件 在 Hexo 站点下新建gulpfile.js文件，文件内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182var gulp = require(&#x27;gulp&#x27;);var minifycss = require(&#x27;gulp-minify-css&#x27;);var uglify = require(&#x27;gulp-uglify&#x27;);var htmlmin = require(&#x27;gulp-htmlmin&#x27;);var htmlclean = require(&#x27;gulp-htmlclean&#x27;);var imagemin = require(&#x27;gulp-imagemin&#x27;);var babel = require(&#x27;gulp-babel&#x27;);// 压缩css文件gulp.task(&#x27;minify-css&#x27;, function (done) &#123; return gulp.src(&#x27;./public/**/*.css&#x27;) .pipe(minifycss()) .pipe(gulp.dest(&#x27;./public&#x27;)); done();&#125;);// 压缩html文件gulp.task(&#x27;minify-html&#x27;, function (done) &#123; return gulp.src(&#x27;./public/**/*.html&#x27;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&#x27;./public&#x27;)); done();&#125;);// 压缩js文件gulp.task(&#x27;minify-js&#x27;, function (done) &#123; return gulp.src([&#x27;./public/**/*.js&#x27;, &#x27;!./public/**/*.min.js&#x27;]) .pipe(babel(&#123; //将ES6代码转译为可执行的JS代码 presets: [&#x27;es2015&#x27;] // es5检查机制 &#125;)) .pipe(uglify()) .pipe(gulp.dest(&#x27;./public&#x27;)); done();&#125;);// 压缩 public/images 目录内图片(Version&lt;3)// gulp.task(&#x27;minify-images&#x27;, function () &#123;// gulp.src(&#x27;./public/images/**/*.*&#x27;)// .pipe(imagemin(&#123;// optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）// progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片// interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染// multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化// &#125;))// .pipe(gulp.dest(&#x27;./public/images&#x27;));// &#125;);// 压缩 public/images 目录内图片(Version&gt;3)gulp.task(&#x27;minify-images&#x27;, function (done) &#123; gulp.src(&#x27;./public/images/**/*.*&#x27;) .pipe(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(&#123;optimizationLevel: 5&#125;), imagemin.svgo(&#123; plugins: [ &#123;removeViewBox: true&#125;, &#123;cleanupIDs: false&#125; ] &#125;) ])) .pipe(gulp.dest(&#x27;./public/images&#x27;)); done();&#125;);//4.0以前的写法 //gulp.task(&#x27;default&#x27;, [// &#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;//]);//4.0以后的写法// 执行 gulp 命令时执行的任务gulp.task(&#x27;default&#x27;, gulp.series(gulp.parallel(&#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;)), function () &#123; console.log(&quot;----------gulp Finished----------&quot;); // Do something after a, b, and c are finished.&#125;); 4、创建.babelrc文件 在 Hexo 站点下新建.babelrc文件，文件内容如下： 1234&#123; &#x27;presets&#x27;: [&#x27;es2015&#x27;], &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]&#125; 5、静态资源压缩 只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩 12hexo ggulp","link":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客添加helper-live2d动态模型插件","date":"2023-06-01T08:35:00.000Z","path":"2023/06/01/8/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 插件的github地址hexo-helper-live2d live2d模型仓库 必须有Node环境 ➡️ Linux下安装node和npm 1、安装模块&amp;#160;&amp;#160;&amp;#160;&amp;#160;在hexo根目录执行命令1# npm install --save hexo-helper-live2d2、下载模型&amp;#160;&amp;#160;&amp;#160;&amp;#160;作者各种模型包展示 ➡️ hexo live2d插件 2.0 ! live2d模型仓库 live2d-widget-model-chitose live2d-widget-model-epsilon2_1 live2d-widget-model-gf live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru) live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru) live2d-widget-model-haruto live2d-widget-model-hibiki live2d-widget-model-hijiki live2d-widget-model-izumi live2d-widget-model-koharu live2d-widget-model-miku live2d-widget-model-ni-j live2d-widget-model-nico live2d-widget-model-nietzsche live2d-widget-model-nipsilon live2d-widget-model-nito live2d-widget-model-shizuku live2d-widget-model-tororo live2d-widget-model-tsumiki live2d-widget-model-unitychan live2d-widget-model-wanko live2d-widget-model-z16 使用npm install &#123;packagename&#125;安装模型12---笔者使用的模型# npm install live2d-widget-model-hibiki3、详细配置在Hexo的 _config.yml 文件或主题的 _config.yml 文件中添加配置.参阅 live2d-widget.js API- 博主配置文件示例12345678910111213141516171819202122232425262728293031# Live2D## https://github.com/EYHN/hexo-helper-live2d## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: enable: true #enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-hibiki # use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 145 height: 315 mobile: show: true # 是否在移动设备上显示 scale: 0.5 # 移动设备上的缩放 react: opacityDefault: 0.7 opacityOnHover: 0.84、作者寄语 Everything is ok. But you have to do by yourself.","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客配置RSS插件","date":"2023-06-01T07:49:00.000Z","path":"2023/06/01/6/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 1、安装rss插件 在站点根目录下安装 1npm install hexo-generator-feed 2、配置_config.yml文件，启用插件12345678# Extensionsplugins: hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 20 3、在hexo-theme-yilia-plus主题添加RSS订阅配置(可以跳过此步骤) theme-yilia-plus 12# RSS订阅rss: /atom.xml 4、生成RSS订阅文件1hexo g","link":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Linux下安装Git","date":"2023-06-01T05:41:00.000Z","path":"2023/06/01/11/","text":"1、使用yum安装12# yum -y install git# yum remove git 2、源代码安装 1234567891011121314151617---安装依赖的包# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker zlib# cd /usr/local----下载git源码# wget https://github.com/git/git/archive/v2.21.0.tar.gz----解压git源码# tar -zxvf v2.21.0.tar.gz# cd git-2.21.0/# mkdir /usr/local/git----编译安装到指定目录# make prefix=/usr/local/git all# sudo make prefix=/usr/local/git install# vim /etc/profile----添加在文件的最后一行export PATH=/usr/local/git/bin:$PATH# source /etc/profile# git --version 3、FAQ1、 如果解压时出现报错，建议手动下载git源码包然后上传到服务器1234gzip: stdin: unexpected end of filetar: Unexpected EOF in archivetar: Unexpected EOF in archivetar: Error is not recoverable: exiting now","link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Hexo编译文档时JS或HTML混乱解决方案","date":"2023-06-01T03:26:51.000Z","path":"2023/06/01/3/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 之前为在 GitHub 博客上写自己的 html 网页，在 hexo 根目录下的 source 文件夹中放了自己的 js 文件，每次 hexo g 后，pubic 文件夹中的 js 文件就混乱了，与自己实际 js 不一致。 解决方案(跳过 hexo 渲染) Hexo 3.0 以上支持修改 Hexo 主目录下的 _config.yml 配置文件中的 skip_render 参数。 1234567891011skip_render: &quot;test.html&quot; # source 文件夹下指定文件skip_render: test/* # 单个文件夹下全部文件skip_render: test/*.md # 单个文件夹下指定类型文件skip_render: test/** # 单个文件夹下全部文件及子文件skip_render: # 多个文件夹以及其他情况 - test/* - test/*.html 博主自己的配置如下 1234567891011121314# 跳过 hexo 渲染skip_render: - anires/** - assets/** - gitment/** - baidu_sitepush/** - canvas_nest/** - docs/** - &#x27;baidu_verify_QzGNSJ7F59.html&#x27; - &#x27;*.html&#x27; - &#x27;*.js&#x27; - README.md - &#x27;*.sh&#x27; - &#x27;*.txt&#x27; 注：若修改配置后不见效果，先执行 hexo clean 后再执行 hexo g 重新编译","link":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo博客集成码云评论系统","date":"2023-06-01T02:39:00.000Z","path":"2023/06/01/4/","text":"Tips:前导必备 博主博客地址 博主使用的是**hexo-theme-yilia-plus**主题 简介 giteement系统是基于gitment的源码开发和扩展的 ➡️ https://gitee.com/zhousiwei/giteementgiteement还在继续维护优化中…欢迎小伙伴们加入一起维护 目前实现以下功能： 基于码云的issues来进行评论的,所以需要有码云账号。 实现了类似码云issues的回复功能，评论开头用@符号选择你要回复的人，回复完毕，如果你要回复的人登录码云，会有消息提示。 效果展示 ➡️ https://zhousiwei.gitee.io/ 1、配置第三方应用&amp;#160;&amp;#160;&amp;#160;&amp;#160;使用码云的issues作为评论系统，就要使用码云来登录评论，所以需要在码云上配置第三方应用。 注册一个新的第三方应用 ➡️ https://gitee.com/oauth/applications/new 应用名称(根据实际来填写) 应用描述(根据实际来填写) 应用主页(应用程序主页的完整URL) 应用回调地址(一般是博客的域名) 权限请选择issues、notes 2、配置hexo-theme-yilia-plus主题注册完成后得到Client ID和Client Secret 修改hexo-theme-yilia-plus主题的配置文件_config.yml12345678910111213giteement: enable: true # 是否启用码云评论系统 # 是否使用官方js(false可以提升访问速度) remote: false redirect_uri: https://zhousiwei.gitee.io/yilia-plus-demo # 应用回调地址(请和配置的第三方应用保持一致) # 不能更改(网上开源项目https://github.com/Rob--W/cors-anywhere作者提供的专门用来跨域服务器的配置) oauth_uri: https://cors-anywhere.herokuapp.com/https://gitee.com/oauth/token giteeID: zhousiwei # 你的码云账号英文名 # 存储评论的 repo repo: yilia-plus-demo gitment_oauth: client_id: &#x27;*********&#x27; #client ID client_secret: &#x27;*********&#x27; #client secret 3、重新编译运行即可查看效果1hexo s -g 针对不同文章的date属性生成id，只要保证每篇文章有date属性并且不重复即可 hexo-theme-yilia-plus配置Demo ➡️ https://gitee.com/zhousiwei/yilia-plus-demo 4、待解决问题 giteement的UI是直接使用gitment的UI，不是很好看，后期准备优化。 新增文章的时候需要登录自己的gitee账号，点击评论初始化按钮。(后面考虑实现自动初始化 Gitment 评论脚本) 效果图1、整体UI 2、@回复功能 其他主题例子1、主题landscape中使用修改themes/landscape/layout/index.ejs文件 修改themes/landscape/layout/_partial/article.ejs文件 增加themes&#x2F;landscape&#x2F;layout&#x2F;_partial&#x2F;comment.ejs1234567891011121314151617181920212223242526&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.giteement &amp;&amp; theme.giteement.enable)&#123; %&gt; &lt;div id=&quot;giteement-ctn&quot;&gt;&lt;/div&gt; &lt;% if (theme.giteement &amp;&amp; theme.giteement.remote)&#123; %&gt; &lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://giteement.oss-cn-beijing.aliyuncs.com/wd-discuss.css&quot;&gt; --&gt; &lt;!-- &lt;script src=&quot;https://giteement.oss-cn-beijing.aliyuncs.com/discuss_hexo.js&quot;&gt;&lt;/script&gt; --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://giteement.oss-cn-beijing.aliyuncs.com/default.css&quot;&gt; &lt;script src=&quot;https://giteement.oss-cn-beijing.aliyuncs.com/giteement.browser.js&quot;&gt;&lt;/script&gt; &lt;% &#125; else &#123; %&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%=config.root%&gt;assets/default.css&quot;&gt; &lt;script src=&quot;&lt;%=config.root%&gt;assets/giteement.browser.js&quot;&gt;&lt;/script&gt; &lt;% &#125; %&gt; &lt;script&gt; var giteement = new Giteement(&#123; id: &#x27;&lt;%=page.date.format(&#x27;YYYYMMDDHHmmss&#x27;)%&gt;&#x27;, owner: &#x27;&lt;%=theme.giteement.giteeID%&gt;&#x27;, repo: &#x27;&lt;%=theme.giteement.repo%&gt;&#x27;, backcall_uri: &#x27;&lt;%=theme.giteement.redirect_uri%&gt;&#x27;, oauth_uri: &#x27;&lt;%=theme.giteement.oauth_uri%&gt;&#x27;, oauth: &#123; client_id: &#x27;&lt;%=theme.giteement.gitment_oauth.client_id%&gt;&#x27;, client_secret: &#x27;&lt;%=theme.giteement.gitment_oauth.client_secret%&gt;&#x27; &#125;, &#125;) giteement.render(&#x27;giteement-ctn&#x27;) &lt;/script&gt;&lt;% &#125; %&gt; 2、主题next中使用修改themes/next/layout/index.swig文件 修改themes/next/layout/_partials/comments.swig文件 把theme.giteement.ClientID和theme.giteement.ClientSecret改为theme.giteement.gitment_oauth.client_id和theme.giteement.gitment_oauth.client_secret 转载自原作者eillott的文章，进行修改了一部分，并且集成了**hexo-theme-yilia-plus**主题","link":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"IDEA设置后端代码开发规范","date":"2023-06-01T02:33:00.000Z","path":"2023/06/01/9/","text":"1、IDEA 配置svn提交svn报错： 1.1、下载：https://www.visualsvn.com/downloads/ 1.2、修改IDEA配置指向的路径2、IDEA 设置 Tab 键为 4 个空格Scheme 选择 Project ,在下面把取消勾选 Use tab character 3、IDEA 设置编码格式为 UTF-8 4、IDEA 设置换行符为 Unix 编码格式 5、IDEA 设置类注释模板1234/** * * @author Created by 思伟 on $&#123;DATE&#125; */","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"http://example.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"}]},{"title":"Git彻底删除历史提交记录的方法","date":"2023-06-01T02:22:00.000Z","path":"2023/06/01/1/","text":"1、查看Git提交记录1# git log 2、找到需要回滚到的提交点，复制它的hash值1# git reset --hard 你复制的hash值3、将当前指向的head推到git1# git push --force","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"http://example.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"}]},{"title":"Git分支的创建、删除、切换","date":"2023-06-01T02:06:00.000Z","path":"2023/06/01/2/","text":"1、本地创建新分支并切换到新分支1# git checkout -b 分支名 2、提交分支到远程仓库1# git push origin 分支名 3、切换分支1# git checkout 分支名 4、删除远程分支1# git push origin --delete 分支名 5、删除本地分支1# git branch -D 分支名 Tips：其他分支命令 查看当前分支 git branch 查看所属分支 git branch -a","link":"","tags":[{"name":"日记本","slug":"日记本","permalink":"http://example.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"}]}]